<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
	ViewBag.Title = "Registrar";//Titulo de la pestaña
	//ViewBag.HeaderIcon = "fa-plus";
	//ViewBag.HeaderTitle = "Registrar <#= ViewDataTypeShortName #>";
	//ViewBag.HeaderDescription = "";
	//ViewBag.Header = false; // Si desea ocultar la cabecera
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>

<#
}
#>

@* Toda referencia de estilos escribir dentro de la secccion "styles" *@
@section styles{
    @* Utilice el Metodo @Url.ContentArea("~/*") para obtener la url relativa del archivo *@
    <link href="@Url.ContentArea("~/Content/Site.css")" rel="stylesheet"/>

	@* Si ocupa el elemento DateTimePicker en alguna modal, descomente la linea de abajo *@
    @* @Styles.Render("~/Content/datetimepicker") *@
}

 @* Button Bar *@
<nav class="navbar-button">
    <div class="nav navbar-button-right">
        <div class="btn-group">
						<a href="#" class="btn btn-default navbar-btn" data-tooltip="" title="" data-original-title="Atrás"><i class="fa fa-arrow-circle-left"></i></a>
            <a href="@Request.RawUrl" class="btn btn-default navbar-btn" data-tooltip="" title="Recargar"><i class="fa fa-refresh"></i></a>
            <a href="#" class="btn btn-default navbar-btn" data-tooltip="" title="Información"><i class="fa fa-info-circle"></i></a>
        </div>
    </div>
</nav>
<div>
@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="well form-horizontal">
       
<# 
    if (isControlHtmlAttributesSupported) {
#>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
<#        
    } else {
#>
        @Html.ValidationSummary(true)
<#      
    }
#>
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }

#>
        <div class="form-group">
<#
        if (property.IsForeignKey) {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label col-md-2" })
<#
        } else {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
        }
#>
            <div class="col-md-10">
							<div class="input-group">
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
        if (property.IsForeignKey) {
#>
<# 
								
            if (isControlHtmlAttributesSupported) {
#>
                <span class="input-group-addon"><i class="fa fa-keyboard-o"></i></span>
								@Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                <span class="input-group-addon"><i class="fa fa-keyboard-o"></i></span>
								@Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
            }
#>
<#
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
                <div class="">
<#
                PushIndent("    ");
#>						<label>
									@Html.EditorFor(model => model.<#= property.PropertyName #>)
              </label>
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                <span class="input-group-addon"><i class="fa fa-keyboard-o"></i></span>
								@Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                <span class="input-group-addon"><i class="fa fa-keyboard-o"></i></span>
								@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control", @placeholder = "<#= property.PropertyName #>" } })
<#
            } 
        } else {
#>
                <span class="input-group-addon"><i class="fa fa-keyboard-o"></i></span>
								@Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
        }
#>
</div>
<# 
        if (isControlHtmlAttributesSupported) {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
        } else {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
        }
#>
<#
        if (isCheckbox && isControlHtmlAttributesSupported) {
            PopIndent();
#>
                </div>
<#
        }
#>
            </div>
        </div>

<#
    }
}
#>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn btn-default fltrgt"><i class="fa fa-floppy-o fa-fw"></i>Guardar Cambios</button>
            </div>
        </div>
    </div>
}

</div>

@* Toda referencia de Scripts escribir dentro de la section "scripts" *@
@section scripts{
	@* Si realiza una referencia de un script el Metodo @Url.ContentArea("~/") ejem: <script type="text/javascript" src="@Url.ContentArea("~/Scripts/...")"></script> *@
	
	@* Si ocupa el elemento datepicker en alguna modal, descomente la linea de abajo *@
	@* @Scripts.Render("~/bundles/datetimepicker") *@
}

<#
if(IsLayoutPageSelected && IsBundleConfigPresent) {
#>


<#
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>